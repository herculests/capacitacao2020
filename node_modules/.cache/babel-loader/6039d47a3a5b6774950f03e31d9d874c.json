{"ast":null,"code":"var _jsxFileName = \"/home/hercules/Documentos/projeto/frontend/src/formulario.js\";\nimport React from 'react';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport { Button, Modal, Form, Input, Table, Popconfirm } from 'antd';\nconst EditableContext = React.createContext();\n\nconst EditableRow = ({\n  form,\n  index,\n  ...props\n}) => React.createElement(EditableContext.Provider, {\n  value: form,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}, React.createElement(\"tr\", Object.assign({}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n})));\n\nconst EditableFormRow = Form.create()(EditableRow);\n\nclass EditableCell extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      editing: false\n    };\n\n    this.toggleEdit = () => {\n      const editing = !this.state.editing;\n      this.setState({\n        editing\n      }, () => {\n        if (editing) {\n          this.input.focus();\n        }\n      });\n    };\n\n    this.save = e => {\n      const {\n        record,\n        handleSave\n      } = this.props;\n      this.form.validateFields((error, values) => {\n        if (error && error[e.currentTarget.id]) {\n          return;\n        }\n\n        this.toggleEdit();\n        handleSave({ ...record,\n          ...values\n        });\n      });\n    };\n\n    this.renderCell = form => {\n      this.form = form;\n      const {\n        children,\n        dataIndex,\n        record,\n        title\n      } = this.props;\n      const {\n        editing\n      } = this.state;\n      return editing ? React.createElement(Form.Item, {\n        style: {\n          margin: 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, form.getFieldDecorator(dataIndex, {\n        rules: [{\n          required: true,\n          message: `${title} is required.`\n        }],\n        initialValue: record[dataIndex]\n      })(React.createElement(Input, {\n        ref: node => this.input = node,\n        onPressEnter: this.save,\n        onBlur: this.save,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }))) : React.createElement(\"div\", {\n        className: \"editable-cell-value-wrap\",\n        style: {\n          paddingRight: 24\n        },\n        onClick: this.toggleEdit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, children);\n    };\n  }\n\n  render() {\n    const {\n      editable,\n      dataIndex,\n      title,\n      record,\n      index,\n      handleSave,\n      children,\n      ...restProps\n    } = this.props;\n    return React.createElement(\"td\", Object.assign({}, restProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), editable ? React.createElement(EditableContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, this.renderCell) : children);\n  }\n\n}\n\nconst CollectionCreateForm = Form.create({\n  name: 'form_in_modal'\n})(class extends React.Component {\n  render() {\n    const {\n      visible,\n      onCancel,\n      onCreate,\n      form\n    } = this.props;\n    const {\n      getFieldDecorator\n    } = form;\n    return React.createElement(Modal, {\n      visible: visible,\n      title: \"Cadastrar de cliente\",\n      okText: \"Cadastrar\",\n      cancelText: \"Cancelar\",\n      onCancel: onCancel,\n      onOk: onCreate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Form, {\n      layout: \"vertical\",\n      labelCol: {\n        span: 5\n      },\n      wrapperCol: {\n        span: 12\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"Nome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, getFieldDecorator('nome', {\n      rules: [{\n        required: true,\n        message: 'Por favor, insira os dados!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Telefone\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, getFieldDecorator('telefone', {\n      rules: [{\n        required: true,\n        message: 'Por favor, insira os dados!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        required: true,\n        message: 'Por favor, insira os dados!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    })))));\n  }\n\n});\n\nclass CollectionsPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDelete = key => {\n      const data = [...this.state.data];\n      this.setState({\n        data: data.filter(item => item.key !== key)\n      });\n    };\n\n    this.handleSave = row => {\n      const newData = [...this.state.data];\n      const index = newData.findIndex(item => row.key === item.key);\n      const item = newData[index];\n      newData.splice(index, 1, { ...item,\n        ...row\n      });\n      this.setState({\n        data: newData\n      });\n    };\n\n    this.state = {\n      visible: false\n    };\n\n    this.showModal = () => {\n      this.setState({\n        visible: true\n      });\n    };\n\n    this.handleCancel = () => {\n      this.setState({\n        visible: false\n      });\n    };\n\n    this.handleCreate = () => {\n      const {\n        form\n      } = this.formRef.props;\n      form.validateFields((err, values) => {\n        if (err) {\n          return;\n        }\n\n        const {\n          count,\n          data\n        } = this.state; //\n\n        const newData = {\n          id: count + 1,\n          key: count,\n          nome: values.nome,\n          telefone: values.telefone,\n          email: values.email\n        };\n        this.setState({\n          data: [...data, newData],\n          count: count + 1\n        }); //\n\n        console.log('debug: ', data);\n        form.resetFields();\n        this.setState({\n          visible: false\n        });\n      });\n    };\n\n    this.saveFormRef = formRef => {\n      this.formRef = formRef;\n    };\n\n    this.columns = [{\n      title: 'Id',\n      dataIndex: 'id'\n    }, {\n      title: 'Nome',\n      dataIndex: 'nome',\n      width: '30%',\n      editable: true\n    }, {\n      title: 'Telefone',\n      dataIndex: 'telefone'\n    }, {\n      title: 'E-mail',\n      dataIndex: 'email'\n    }, {\n      title: 'OperaÃ§Ã£o',\n      dataIndex: 'operation',\n      render: (text, record) => this.state.data.length >= 1 ? React.createElement(Popconfirm, {\n        title: \"Deseja realmente deletar?\",\n        onConfirm: () => this.handleDelete(record.key),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"Deletar\")) : null\n    }];\n    this.state = {\n      data: [],\n      count: 0\n    };\n  }\n\n  render() {\n    const {\n      data\n    } = this.state;\n    const components = {\n      body: {\n        row: EditableFormRow,\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return { ...col,\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave\n        })\n      };\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"subTitulo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"Agenda de contatos\"), React.createElement(Button, {\n      type: \"primary\",\n      className: \"mod\",\n      onClick: this.showModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"Cadastrar\"), React.createElement(CollectionCreateForm, {\n      wrappedComponentRef: this.saveFormRef,\n      visible: this.state.visible,\n      onCancel: this.handleCancel,\n      onCreate: this.handleCreate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }), React.createElement(Table, {\n      components: components,\n      rowClassName: () => 'editable-row',\n      bordered: true,\n      data: data,\n      columns: columns,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default CollectionsPage;","map":{"version":3,"sources":["/home/hercules/Documentos/projeto/frontend/src/formulario.js"],"names":["React","Button","Modal","Form","Input","Table","Popconfirm","EditableContext","createContext","EditableRow","form","index","props","EditableFormRow","create","EditableCell","Component","state","editing","toggleEdit","setState","input","focus","save","e","record","handleSave","validateFields","error","values","currentTarget","id","renderCell","children","dataIndex","title","margin","getFieldDecorator","rules","required","message","initialValue","node","paddingRight","render","editable","restProps","CollectionCreateForm","name","visible","onCancel","onCreate","span","CollectionsPage","constructor","handleDelete","key","data","filter","item","row","newData","findIndex","splice","showModal","handleCancel","handleCreate","formRef","err","count","nome","telefone","email","console","log","resetFields","saveFormRef","columns","width","text","length","components","body","cell","map","col","onCell"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './index.css';\nimport 'antd/dist/antd.css';\n\nimport { Button, Modal, Form, Input, Table, Popconfirm } from 'antd';\n\nconst EditableContext = React.createContext();\n\nconst EditableRow = ({ form, index, ...props }) => (\n  <EditableContext.Provider value={form}>\n    <tr {...props} />\n  </EditableContext.Provider>\n);\n\nconst EditableFormRow = Form.create()(EditableRow);\n\nclass EditableCell extends React.Component {\n  state = {\n    editing: false,\n  };\n\n  toggleEdit = () => {\n    const editing = !this.state.editing;\n    this.setState({ editing }, () => {\n      if (editing) {\n        this.input.focus();\n      }\n    });\n  };\n\n  save = e => {\n    const { record, handleSave } = this.props;\n    this.form.validateFields((error, values) => {\n      if (error && error[e.currentTarget.id]) {\n        return;\n      }\n      this.toggleEdit();\n      handleSave({ ...record, ...values });\n    });\n  };\n\n  renderCell = form => {\n    this.form = form;\n    const { children, dataIndex, record, title } = this.props;\n    const { editing } = this.state;\n    return editing ? (\n      <Form.Item style={{ margin: 0 }}>\n        {form.getFieldDecorator(dataIndex, {\n          rules: [\n            {\n              required: true,\n              message: `${title} is required.`,\n            },\n          ],\n          initialValue: record[dataIndex],\n        })(<Input ref={node => (this.input = node)} onPressEnter={this.save} onBlur={this.save} />)}\n      </Form.Item>\n    ) : (\n      <div\n        className=\"editable-cell-value-wrap\"\n        style={{ paddingRight: 24 }}\n        onClick={this.toggleEdit}\n      >\n        {children}\n      </div>\n    );\n  };\n\n  render() {\n    const {\n      editable,\n      dataIndex,\n      title,\n      record,\n      index,\n      handleSave,\n      children,\n      ...restProps\n    } = this.props;\n    return (\n      <td {...restProps}>\n        {editable ? (\n          <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>\n        ) : (\n          children\n        )}\n      </td>\n    );\n  }\n}\n\nconst CollectionCreateForm = Form.create({ name: 'form_in_modal' })(\n\n  class extends React.Component {\n    render() {\n      const { visible, onCancel, onCreate, form } = this.props;\n      const { getFieldDecorator } = form;\n      return (\n        <Modal\n          visible={visible}\n          title=\"Cadastrar de cliente\"\n          okText=\"Cadastrar\"\n          cancelText=\"Cancelar\"\n          onCancel={onCancel}\n          onOk={onCreate}\n        >\n          <Form layout=\"vertical\" labelCol={{ span: 5 }} wrapperCol={{ span: 12 }}>\n            <Form.Item label=\"Nome\">\n              {getFieldDecorator('nome', {\n                rules: [{ required: true, message: 'Por favor, insira os dados!' }],\n              })(<Input />)}\n            </Form.Item>\n            <Form.Item label=\"Telefone\">\n              {getFieldDecorator('telefone', {\n                rules: [{ required: true, message: 'Por favor, insira os dados!' }],\n              })(<Input />)}\n            </Form.Item>\n            <Form.Item label=\"E-mail\">\n              {getFieldDecorator('email', {\n                rules: [{ required: true, message: 'Por favor, insira os dados!' }],\n              })(<Input />)}\n            </Form.Item>\n          </Form>\n        </Modal>\n      );\n    }\n  },\n);\n\nclass CollectionsPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.columns = [\n      {\n        title: 'Id',\n        dataIndex: 'id',\n      },\n      {\n        title: 'Nome',\n        dataIndex: 'nome',\n        width: '30%',\n        editable: true,\n      },\n      {\n        title: 'Telefone',\n        dataIndex: 'telefone',\n      },\n      {\n        title: 'E-mail',\n        dataIndex: 'email',\n      },\n      {\n        title: 'OperaÃ§Ã£o',\n        dataIndex: 'operation',\n        render: (text, record) =>\n          this.state.data.length >= 1 ? (\n            <Popconfirm title=\"Deseja realmente deletar?\" onConfirm={() => this.handleDelete(record.key)}>\n              <a>Deletar</a>\n            </Popconfirm>\n          ) : null,\n      },\n    ];\n\n    this.state = {\n      data: [\n        \n      ],\n      count: 0,\n    };\n  }\n\n  handleDelete = key => {\n    const data = [...this.state.data];\n    this.setState({ data: data.filter(item => item.key !== key) });\n  };\n\n  handleSave = row => {\n    const newData = [...this.state.data];\n    const index = newData.findIndex(item => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, {\n      ...item,\n      ...row,\n    });\n    this.setState({ data: newData });\n  };\n\n  state = {\n    visible: false,\n  };\n\n  showModal = () => {\n    this.setState({ visible: true });\n  };\n\n  handleCancel = () => {\n    this.setState({ visible: false });\n  };\n\n  handleCreate = () => {\n\n    const { form } = this.formRef.props;\n    form.validateFields((err, values) => {\n      if (err) {\n        return;\n      }\n\n      const { count, data } = this.state;\n      \n//\n      const newData = {\n        id: count + 1,\n        key: count,\n        nome: values.nome,\n        telefone: values.telefone,\n        email: values.email,\n      };\n    this.setState({\n      data: [...data, newData],\n      count: count + 1,\n    });\n\n    //\n      console.log('debug: ', data);\n      form.resetFields();\n      this.setState({ visible: false });\n    });\n  };\n\n  saveFormRef = formRef => {\n    this.formRef = formRef;\n  };\n\n  render() {\n    const { data } = this.state;\n    const components = {\n      body: {\n        row: EditableFormRow,\n        cell: EditableCell,\n      },\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave,\n        }),\n      };\n    });\n    return (\n      <div>\n        <h1 className=\"subTitulo\" >Agenda de contatos</h1>\n        <Button type=\"primary\" className=\"mod\" onClick={this.showModal}>\n            Cadastrar\n        </Button>\n        <CollectionCreateForm\n          wrappedComponentRef={this.saveFormRef}\n          visible={this.state.visible}\n          onCancel={this.handleCancel}\n          onCreate={this.handleCreate}\n        />\n        <br />\n        <br />\n\n        <Table\n          components={components}\n          rowClassName={() => 'editable-row'}\n          bordered\n          data={data}\n          columns={columns}\n          />\n      </div>\n    );\n  }\n}\nexport default CollectionsPage;"]},"metadata":{},"sourceType":"module"}