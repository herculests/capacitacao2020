{"ast":null,"code":"var _jsxFileName = \"/home/hercules/Documentos/projeto/frontend/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport { Table, Input, Button, Popconfirm, Form } from 'antd';\nconst EditableContext = React.createContext();\n\nconst EditableRow = ({\n  form,\n  index,\n  ...props\n}) => React.createElement(EditableContext.Provider, {\n  value: form,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}, React.createElement(\"tr\", Object.assign({}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n})));\n\nconst EditableFormRow = Form.create()(EditableRow);\n\nclass EditableCell extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      editing: false\n    };\n\n    this.toggleEdit = () => {\n      const editing = !this.state.editing;\n      this.setState({\n        editing\n      }, () => {\n        if (editing) {\n          this.input.focus();\n        }\n      });\n    };\n\n    this.save = e => {\n      const {\n        record,\n        handleSave\n      } = this.props;\n      this.form.validateFields((error, values) => {\n        if (error && error[e.currentTarget.id]) {\n          return;\n        }\n\n        this.toggleEdit();\n        handleSave({ ...record,\n          ...values\n        });\n      });\n    };\n\n    this.renderCell = form => {\n      this.form = form;\n      const {\n        children,\n        dataIndex,\n        record,\n        title\n      } = this.props;\n      const {\n        editing\n      } = this.state;\n      return editing ? React.createElement(Form.Item, {\n        style: {\n          margin: 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, form.getFieldDecorator(dataIndex, {\n        rules: [{\n          required: true,\n          message: `${title} is required.`\n        }],\n        initialValue: record[dataIndex]\n      })(React.createElement(Input, {\n        ref: node => this.input = node,\n        onPressEnter: this.save,\n        onBlur: this.save,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }))) : React.createElement(\"div\", {\n        className: \"editable-cell-value-wrap\",\n        style: {\n          paddingRight: 24\n        },\n        onClick: this.toggleEdit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, children);\n    };\n  }\n\n  render() {\n    const {\n      editable,\n      dataIndex,\n      title,\n      record,\n      index,\n      handleSave,\n      children,\n      ...restProps\n    } = this.props;\n    return React.createElement(\"td\", Object.assign({}, restProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), editable ? React.createElement(EditableContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, this.renderCell) : children);\n  }\n\n}\n\nclass EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDelete = key => {\n      const dataSource = [...this.state.dataSource];\n      this.setState({\n        dataSource: dataSource.filter(item => item.key !== key)\n      });\n    };\n\n    this.handleAdd = () => {\n      const {\n        count,\n        dataSource\n      } = this.state;\n      const newData = {\n        key: count,\n        n: `Edward King ${count}`,\n        id: 32,\n        email: `London, Park Lane no. ${count}`\n      };\n      this.setState({\n        dataSource: [...dataSource, newData],\n        count: count + 1\n      });\n    };\n\n    this.handleSave = row => {\n      const newData = [...this.state.dataSource];\n      const index = newData.findIndex(item => row.key === item.key);\n      const item = newData[index];\n      newData.splice(index, 1, { ...item,\n        ...row\n      });\n      this.setState({\n        dataSource: newData\n      });\n    };\n\n    this.columns = [{\n      title: 'n',\n      dataIndex: 'n',\n      width: '30%',\n      editable: true\n    }, {\n      title: 'Id',\n      dataIndex: 'id'\n    }, {\n      title: 'E-mail',\n      dataIndex: 'email'\n    }, {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (text, record) => this.state.dataSource.length >= 1 ? React.createElement(Popconfirm, {\n        title: \"Deseja realmente deletar?\",\n        onConfirm: () => this.handleDelete(record.key),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Deletar\")) : null\n    }];\n    this.state = {\n      dataSource: [{\n        key: '0',\n        n: 'Edward King 0',\n        id: '32',\n        email: 'London, Park Lane no. 0'\n      }, {\n        key: '1',\n        n: 'Edward King 1',\n        id: '32',\n        email: 'London, Park Lane no. 1'\n      }],\n      count: 2\n    };\n  }\n\n  render() {\n    const {\n      dataSource\n    } = this.state;\n    const components = {\n      body: {\n        row: EditableFormRow,\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return { ...col,\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave\n        })\n      };\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleAdd,\n      type: \"primary\",\n      style: {\n        marginBottom: 16\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Add a row\"), React.createElement(Table, {\n      components: components,\n      rowClassName: () => 'editable-row',\n      bordered: true,\n      dataSource: dataSource,\n      columns: columns,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }));\n  }\n\n}\n\nReactDOM.render(React.createElement(EditableTable, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 211\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/home/hercules/Documentos/projeto/frontend/src/index.js"],"names":["React","ReactDOM","Table","Input","Button","Popconfirm","Form","EditableContext","createContext","EditableRow","form","index","props","EditableFormRow","create","EditableCell","Component","state","editing","toggleEdit","setState","input","focus","save","e","record","handleSave","validateFields","error","values","currentTarget","id","renderCell","children","dataIndex","title","margin","getFieldDecorator","rules","required","message","initialValue","node","paddingRight","render","editable","restProps","EditableTable","constructor","handleDelete","key","dataSource","filter","item","handleAdd","count","newData","n","email","row","findIndex","splice","columns","width","text","length","components","body","cell","map","col","onCell","marginBottom","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\n\nimport { Table, Input, Button, Popconfirm, Form } from 'antd';\n\nconst EditableContext = React.createContext();\n\nconst EditableRow = ({ form, index, ...props }) => (\n  <EditableContext.Provider value={form}>\n    <tr {...props} />\n  </EditableContext.Provider>\n);\n\nconst EditableFormRow = Form.create()(EditableRow);\n\nclass EditableCell extends React.Component {\n  state = {\n    editing: false,\n  };\n\n  toggleEdit = () => {\n    const editing = !this.state.editing;\n    this.setState({ editing }, () => {\n      if (editing) {\n        this.input.focus();\n      }\n    });\n  };\n\n  save = e => {\n    const { record, handleSave } = this.props;\n    this.form.validateFields((error, values) => {\n      if (error && error[e.currentTarget.id]) {\n        return;\n      }\n      this.toggleEdit();\n      handleSave({ ...record, ...values });\n    });\n  };\n\n  renderCell = form => {\n    this.form = form;\n    const { children, dataIndex, record, title } = this.props;\n    const { editing } = this.state;\n    return editing ? (\n      <Form.Item style={{ margin: 0 }}>\n        {form.getFieldDecorator(dataIndex, {\n          rules: [\n            {\n              required: true,\n              message: `${title} is required.`,\n            },\n          ],\n          initialValue: record[dataIndex],\n        })(<Input ref={node => (this.input = node)} onPressEnter={this.save} onBlur={this.save} />)}\n      </Form.Item>\n    ) : (\n      <div\n        className=\"editable-cell-value-wrap\"\n        style={{ paddingRight: 24 }}\n        onClick={this.toggleEdit}\n      >\n        {children}\n      </div>\n    );\n  };\n\n  render() {\n    const {\n      editable,\n      dataIndex,\n      title,\n      record,\n      index,\n      handleSave,\n      children,\n      ...restProps\n    } = this.props;\n    return (\n      <td {...restProps}>\n        {editable ? (\n          <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>\n        ) : (\n          children\n        )}\n      </td>\n    );\n  }\n}\n\nclass EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.columns = [\n      {\n        title: 'n',\n        dataIndex: 'n',\n        width: '30%',\n        editable: true,\n      },\n      {\n        title: 'Id',\n        dataIndex: 'id',\n      },\n      {\n        title: 'E-mail',\n        dataIndex: 'email',\n      },\n      {\n        title: 'operation',\n        dataIndex: 'operation',\n        render: (text, record) =>\n          this.state.dataSource.length >= 1 ? (\n            <Popconfirm title=\"Deseja realmente deletar?\" onConfirm={() => this.handleDelete(record.key)}>\n              <a>Deletar</a>\n            </Popconfirm>\n          ) : null,\n      },\n    ];\n\n    this.state = {\n      dataSource: [\n        {\n          key: '0',\n          n: 'Edward King 0',\n          id: '32',\n          email: 'London, Park Lane no. 0',\n        },\n        {\n          key: '1',\n          n: 'Edward King 1',\n          id: '32',\n          email: 'London, Park Lane no. 1',\n        },\n      ],\n      count: 2,\n    };\n  }\n\n  handleDelete = key => {\n    const dataSource = [...this.state.dataSource];\n    this.setState({ dataSource: dataSource.filter(item => item.key !== key) });\n  };\n\n  handleAdd = () => {\n    const { count, dataSource } = this.state;\n    const newData = {\n      key: count,\n      n: `Edward King ${count}`,\n      id: 32,\n      email: `London, Park Lane no. ${count}`,\n    };\n    this.setState({\n      dataSource: [...dataSource, newData],\n      count: count + 1,\n    });\n  };\n\n  handleSave = row => {\n    const newData = [...this.state.dataSource];\n    const index = newData.findIndex(item => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, {\n      ...item,\n      ...row,\n    });\n    this.setState({ dataSource: newData });\n  };\n\n  render() {\n    const { dataSource } = this.state;\n    const components = {\n      body: {\n        row: EditableFormRow,\n        cell: EditableCell,\n      },\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave,\n        }),\n      };\n    });\n    return (\n      <div>\n        <Button onClick={this.handleAdd} type=\"primary\" style={{ marginBottom: 16 }}>\n          Add a row\n        </Button>\n        <Table\n          components={components}\n          rowClassName={() => 'editable-row'}\n          bordered\n          dataSource={dataSource}\n          columns={columns}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<EditableTable />, document.getElementById('root'));"]},"metadata":{},"sourceType":"module"}